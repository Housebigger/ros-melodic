/// autogenerated analytical inverse kinematics code from ikfast program part of OpenRAVE
/// \author Rosen Diankov
///
/// Licensed under the Apache License, Version 2.0 (the "License");
/// you may not use this file except in compliance with the License.
/// You may obtain a copy of the License at
///     http://www.apache.org/licenses/LICENSE-2.0
/// 
/// Unless required by applicable law or agreed to in writing, software
/// distributed under the License is distributed on an "AS IS" BASIS,
/// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
/// See the License for the specific language governing permissions and
/// limitations under the License.
///
/// ikfast version 0x1000004b generated on 2023-11-23 23:13:10.615454
/// Generated using solver transform6d
/// To compile with gcc:
///     gcc -lstdc++ ik.cpp
/// To compile without any main function as a shared object (might need -llapack):
///     gcc -fPIC -lstdc++ -DIKFAST_NO_MAIN -DIKFAST_CLIBRARY -shared -Wl,-soname,libik.so -o libik.so ik.cpp
#define IKFAST_HAS_LIBRARY
#include "ikfast.h" // found inside share/openrave-X.Y/python/ikfast.h
using namespace ikfast;

// check if the included ikfast version matches what this file was compiled with
#define IKFAST_COMPILE_ASSERT(x) extern int __dummy[(int)x]
IKFAST_COMPILE_ASSERT(IKFAST_VERSION==0x1000004b);

#include <cmath>
#include <vector>
#include <limits>
#include <algorithm>
#include <complex>

#ifndef IKFAST_ASSERT
#include <stdexcept>
#include <sstream>
#include <iostream>

#ifdef _MSC_VER
#ifndef __PRETTY_FUNCTION__
#define __PRETTY_FUNCTION__ __FUNCDNAME__
#endif
#endif

#ifndef __PRETTY_FUNCTION__
#define __PRETTY_FUNCTION__ __func__
#endif

#define IKFAST_ASSERT(b) { if( !(b) ) { std::stringstream ss; ss << "ikfast exception: " << __FILE__ << ":" << __LINE__ << ": " <<__PRETTY_FUNCTION__ << ": Assertion '" << #b << "' failed"; throw std::runtime_error(ss.str()); } }

#endif

#if defined(_MSC_VER)
#define IKFAST_ALIGNED16(x) __declspec(align(16)) x
#else
#define IKFAST_ALIGNED16(x) x __attribute((aligned(16)))
#endif

#define IK2PI  ((IkReal)6.28318530717959)
#define IKPI  ((IkReal)3.14159265358979)
#define IKPI_2  ((IkReal)1.57079632679490)

#ifdef _MSC_VER
#ifndef isnan
#define isnan _isnan
#endif
#ifndef isinf
#define isinf _isinf
#endif
//#ifndef isfinite
//#define isfinite _isfinite
//#endif
#endif // _MSC_VER

// lapack routines
extern "C" {
  void dgetrf_ (const int* m, const int* n, double* a, const int* lda, int* ipiv, int* info);
  void zgetrf_ (const int* m, const int* n, std::complex<double>* a, const int* lda, int* ipiv, int* info);
  void dgetri_(const int* n, const double* a, const int* lda, int* ipiv, double* work, const int* lwork, int* info);
  void dgesv_ (const int* n, const int* nrhs, double* a, const int* lda, int* ipiv, double* b, const int* ldb, int* info);
  void dgetrs_(const char *trans, const int *n, const int *nrhs, double *a, const int *lda, int *ipiv, double *b, const int *ldb, int *info);
  void dgeev_(const char *jobvl, const char *jobvr, const int *n, double *a, const int *lda, double *wr, double *wi,double *vl, const int *ldvl, double *vr, const int *ldvr, double *work, const int *lwork, int *info);
}

using namespace std; // necessary to get std math routines

#ifdef IKFAST_NAMESPACE
namespace IKFAST_NAMESPACE {
#endif

inline float IKabs(float f) { return fabsf(f); }
inline double IKabs(double f) { return fabs(f); }

inline float IKsqr(float f) { return f*f; }
inline double IKsqr(double f) { return f*f; }

inline float IKlog(float f) { return logf(f); }
inline double IKlog(double f) { return log(f); }

// allows asin and acos to exceed 1. has to be smaller than thresholds used for branch conds and evaluation
#ifndef IKFAST_SINCOS_THRESH
#define IKFAST_SINCOS_THRESH ((IkReal)1e-7)
#endif

// used to check input to atan2 for degenerate cases. has to be smaller than thresholds used for branch conds and evaluation
#ifndef IKFAST_ATAN2_MAGTHRESH
#define IKFAST_ATAN2_MAGTHRESH ((IkReal)1e-7)
#endif

// minimum distance of separate solutions
#ifndef IKFAST_SOLUTION_THRESH
#define IKFAST_SOLUTION_THRESH ((IkReal)1e-6)
#endif

// there are checkpoints in ikfast that are evaluated to make sure they are 0. This threshold speicfies by how much they can deviate
#ifndef IKFAST_EVALCOND_THRESH
#define IKFAST_EVALCOND_THRESH ((IkReal)0.03) // 5D IK has some crazy degenerate cases, but can rely on jacobian refinment to make better, just need good starting point
#endif


inline float IKasin(float f)
{
IKFAST_ASSERT( f > -1-IKFAST_SINCOS_THRESH && f < 1+IKFAST_SINCOS_THRESH ); // any more error implies something is wrong with the solver
if( f <= -1 ) return float(-IKPI_2);
else if( f >= 1 ) return float(IKPI_2);
return asinf(f);
}
inline double IKasin(double f)
{
IKFAST_ASSERT( f > -1-IKFAST_SINCOS_THRESH && f < 1+IKFAST_SINCOS_THRESH ); // any more error implies something is wrong with the solver
if( f <= -1 ) return -IKPI_2;
else if( f >= 1 ) return IKPI_2;
return asin(f);
}

// return positive value in [0,y)
inline float IKfmod(float x, float y)
{
    while(x < 0) {
        x += y;
    }
    return fmodf(x,y);
}

// return positive value in [0,y)
inline double IKfmod(double x, double y)
{
    while(x < 0) {
        x += y;
    }
    return fmod(x,y);
}

inline float IKacos(float f)
{
IKFAST_ASSERT( f > -1-IKFAST_SINCOS_THRESH && f < 1+IKFAST_SINCOS_THRESH ); // any more error implies something is wrong with the solver
if( f <= -1 ) return float(IKPI);
else if( f >= 1 ) return float(0);
return acosf(f);
}
inline double IKacos(double f)
{
IKFAST_ASSERT( f > -1-IKFAST_SINCOS_THRESH && f < 1+IKFAST_SINCOS_THRESH ); // any more error implies something is wrong with the solver
if( f <= -1 ) return IKPI;
else if( f >= 1 ) return 0;
return acos(f);
}
inline float IKsin(float f) { return sinf(f); }
inline double IKsin(double f) { return sin(f); }
inline float IKcos(float f) { return cosf(f); }
inline double IKcos(double f) { return cos(f); }
inline float IKtan(float f) { return tanf(f); }
inline double IKtan(double f) { return tan(f); }
inline float IKsqrt(float f) { if( f <= 0.0f ) return 0.0f; return sqrtf(f); }
inline double IKsqrt(double f) { if( f <= 0.0 ) return 0.0; return sqrt(f); }
inline float IKatan2Simple(float fy, float fx) {
    return atan2f(fy,fx);
}
inline float IKatan2(float fy, float fx) {
    if( isnan(fy) ) {
        IKFAST_ASSERT(!isnan(fx)); // if both are nan, probably wrong value will be returned
        return float(IKPI_2);
    }
    else if( isnan(fx) ) {
        return 0;
    }
    return atan2f(fy,fx);
}
inline double IKatan2Simple(double fy, double fx) {
    return atan2(fy,fx);
}
inline double IKatan2(double fy, double fx) {
    if( isnan(fy) ) {
        IKFAST_ASSERT(!isnan(fx)); // if both are nan, probably wrong value will be returned
        return IKPI_2;
    }
    else if( isnan(fx) ) {
        return 0;
    }
    return atan2(fy,fx);
}

template <typename T>
struct CheckValue
{
    T value;
    bool valid;
};

template <typename T>
inline CheckValue<T> IKatan2WithCheck(T fy, T fx, T epsilon)
{
    CheckValue<T> ret;
    ret.valid = false;
    ret.value = 0;
    if( !isnan(fy) && !isnan(fx) ) {
        if( IKabs(fy) >= IKFAST_ATAN2_MAGTHRESH || IKabs(fx) > IKFAST_ATAN2_MAGTHRESH ) {
            ret.value = IKatan2Simple(fy,fx);
            ret.valid = true;
        }
    }
    return ret;
}

inline float IKsign(float f) {
    if( f > 0 ) {
        return float(1);
    }
    else if( f < 0 ) {
        return float(-1);
    }
    return 0;
}

inline double IKsign(double f) {
    if( f > 0 ) {
        return 1.0;
    }
    else if( f < 0 ) {
        return -1.0;
    }
    return 0;
}

template <typename T>
inline CheckValue<T> IKPowWithIntegerCheck(T f, int n)
{
    CheckValue<T> ret;
    ret.valid = true;
    if( n == 0 ) {
        ret.value = 1.0;
        return ret;
    }
    else if( n == 1 )
    {
        ret.value = f;
        return ret;
    }
    else if( n < 0 )
    {
        if( f == 0 )
        {
            ret.valid = false;
            ret.value = (T)1.0e30;
            return ret;
        }
        if( n == -1 ) {
            ret.value = T(1.0)/f;
            return ret;
        }
    }

    int num = n > 0 ? n : -n;
    if( num == 2 ) {
        ret.value = f*f;
    }
    else if( num == 3 ) {
        ret.value = f*f*f;
    }
    else {
        ret.value = 1.0;
        while(num>0) {
            if( num & 1 ) {
                ret.value *= f;
            }
            num >>= 1;
            f *= f;
        }
    }
    
    if( n < 0 ) {
        ret.value = T(1.0)/ret.value;
    }
    return ret;
}

template <typename T> struct ComplexLess
{
    bool operator()(const complex<T>& lhs, const complex<T>& rhs) const
    {
        if (real(lhs) < real(rhs)) {
            return true;
        }
        if (real(lhs) > real(rhs)) {
            return false;
        }
        return imag(lhs) < imag(rhs);
    }
};

/// solves the forward kinematics equations.
/// \param pfree is an array specifying the free joints of the chain.
IKFAST_API void ComputeFk(const IkReal* j, IkReal* eetrans, IkReal* eerot) {
IkReal x0,x1,x2,x3,x4,x5,x6,x7,x8,x9,x10,x11,x12,x13,x14,x15,x16,x17,x18,x19,x20,x21,x22,x23,x24,x25,x26,x27,x28,x29,x30,x31,x32,x33,x34,x35,x36,x37,x38,x39,x40,x41,x42,x43,x44,x45,x46,x47,x48,x49,x50,x51,x52;
x0=IKsin(j[0]);
x1=IKcos(j[1]);
x2=IKsin(j[1]);
x3=IKcos(j[2]);
x4=IKsin(j[2]);
x5=IKcos(j[0]);
x6=IKsin(j[4]);
x7=IKcos(j[4]);
x8=IKcos(j[3]);
x9=IKsin(j[3]);
x10=((1.0)*x8);
x11=((0.325)*x4);
x12=((0.999999999958557)*x2);
x13=((1.0)*x9);
x14=((9.10415855677118e-6)*x2);
x15=((0.32)*x2);
x16=((2.91333073816678e-6)*x1);
x17=((0.319999999986738)*x1);
x18=((9.10415855677118e-6)*x1);
x19=((0.325)*x3);
x20=((0.319999999986738)*x2);
x21=((2.91333073816678e-6)*x2);
x22=((0.999999999958557)*x1);
x23=(x0*x1);
x24=(x2*x5);
x25=((-1.0)*x3);
x26=((-1.0)*x4);
x27=(x0*x14);
x28=(x0*x22);
x29=(x22*x5);
x30=(x14*x5);
x31=((((-1.0)*x22))+x14);
x32=(x12+x18);
x33=((-1.0)*x32);
x34=(x3*x31);
x35=(x33*x4);
x36=((((-1.0)*x27))+x28);
x37=((((-1.0)*x28))+x27);
x38=((((-1.0)*x29))+x30);
x39=((((-1.0)*x30))+x29);
x40=(x0*(((((-1.0)*x12))+(((-1.0)*x18)))));
x41=(x5*((x12+x18)));
x42=(x38*x4);
x43=(x36*x4);
x44=(x3*x41);
x45=(x3*x40);
x46=(((x31*x4))+((x3*x32)));
x47=(x35+x34);
x48=(x47*x9);
x49=(((x3*x37))+((x4*x40)));
x50=(x45+x43);
x51=(x44+x42);
x52=(((x3*x39))+((x4*x41)));
eerot[0]=(((x5*x7))+((x6*(((((-1.0)*x10*x49))+(((-1.0)*x13*x50)))))));
eerot[1]=(((x5*x6))+((x7*((((x50*x9))+((x49*x8)))))));
eerot[2]=(((x8*((((x26*x36))+((x25*x40))))))+((x49*x9)));
eetrans[0]=(((x8*(((((-1.0)*x19*x40))+(((-1.0)*x11*x36))))))+((x0*x15))+((x3*((((x0*x20))+((x0*x16))))))+(((1.18e-6)*x23))+((x4*((((x0*x21))+(((-1.0)*x0*x17))))))+((x9*((((x19*x37))+((x11*x40)))))));
eerot[3]=(((x0*x7))+((x6*(((((-1.0)*x10*x52))+(((-1.0)*x13*x51)))))));
eerot[4]=(((x0*x6))+((x7*((((x51*x9))+((x52*x8)))))));
eerot[5]=(((x8*(((((-1.0)*x44))+(((-1.0)*x42))))))+((x52*x9)));
IkReal x53=((1.0)*x5);
eetrans[1]=(((x9*((((x19*x39))+((x11*x41))))))+(((-1.0)*x15*x53))+((x3*(((((-1.0)*x16*x53))+(((-1.0)*x20*x53))))))+(((-1.18e-6)*x1*x5))+((x8*(((((-1.0)*x19*x41))+(((-1.0)*x11*x38))))))+((x4*(((((-1.0)*x21*x53))+((x17*x5)))))));
eerot[6]=(x6*(((((-1.0)*x10*x46))+(((-1.0)*x13*x47)))));
eerot[7]=(x7*((((x46*x8))+x48)));
eerot[8]=(((x8*((((x26*x33))+((x25*x31))))))+((x46*x9)));
eetrans[2]=((0.325)+(((-1.18e-6)*x2))+((x4*((x16+x20))))+(((0.32)*x1))+((x8*(((((-0.325)*x34))+(((-0.325)*x35))))))+((x3*(((((-1.0)*x21))+x17))))+((x9*((((x19*x32))+((x11*x31)))))));
}

IKFAST_API int GetNumFreeParameters() { return 0; }
IKFAST_API const int* GetFreeIndices() { return NULL; }
IKFAST_API int GetNumJoints() { return 5; }

IKFAST_API int GetIkRealSize() { return sizeof(IkReal); }

IKFAST_API int GetIkType() { return 0x67000001; }

class IKSolver {
public:
IkReal j0,cj0,sj0,htj0,j0mul,j1,cj1,sj1,htj1,j1mul,j2,cj2,sj2,htj2,j2mul,j3,cj3,sj3,htj3,j3mul,j4,cj4,sj4,htj4,j4mul,new_r00,r00,rxp0_0,new_r01,r01,rxp0_1,new_r02,r02,rxp0_2,new_r10,r10,rxp1_0,new_r11,r11,rxp1_1,new_r12,r12,rxp1_2,new_r20,r20,rxp2_0,new_r21,r21,rxp2_1,new_r22,r22,rxp2_2,new_px,px,npx,new_py,py,npy,new_pz,pz,npz,pp;
unsigned char _ij0[2], _nj0,_ij1[2], _nj1,_ij2[2], _nj2,_ij3[2], _nj3,_ij4[2], _nj4;

IkReal j100, cj100, sj100;
unsigned char _ij100[2], _nj100;
bool ComputeIk(const IkReal* eetrans, const IkReal* eerot, const IkReal* pfree, IkSolutionListBase<IkReal>& solutions) {
j0=numeric_limits<IkReal>::quiet_NaN(); _ij0[0] = -1; _ij0[1] = -1; _nj0 = -1; j1=numeric_limits<IkReal>::quiet_NaN(); _ij1[0] = -1; _ij1[1] = -1; _nj1 = -1; j2=numeric_limits<IkReal>::quiet_NaN(); _ij2[0] = -1; _ij2[1] = -1; _nj2 = -1; j3=numeric_limits<IkReal>::quiet_NaN(); _ij3[0] = -1; _ij3[1] = -1; _nj3 = -1; j4=numeric_limits<IkReal>::quiet_NaN(); _ij4[0] = -1; _ij4[1] = -1; _nj4 = -1; 
for(int dummyiter = 0; dummyiter < 1; ++dummyiter) {
    solutions.Clear();
r00 = eerot[0*3+0];
r01 = eerot[0*3+1];
r02 = eerot[0*3+2];
r10 = eerot[1*3+0];
r11 = eerot[1*3+1];
r12 = eerot[1*3+2];
r20 = eerot[2*3+0];
r21 = eerot[2*3+1];
r22 = eerot[2*3+2];
px = eetrans[0]; py = eetrans[1]; pz = eetrans[2];

new_r00=r01;
new_r01=r00;
new_r02=((-1.0)*r02);
new_px=((((-0.325)*r02))+px);
new_r10=r11;
new_r11=r10;
new_r12=((-1.0)*r12);
new_py=((((-0.325)*r12))+py);
new_r20=r21;
new_r21=r20;
new_r22=((-1.0)*r22);
new_pz=((-0.325)+pz+(((-0.325)*r22)));
r00 = new_r00; r01 = new_r01; r02 = new_r02; r10 = new_r10; r11 = new_r11; r12 = new_r12; r20 = new_r20; r21 = new_r21; r22 = new_r22; px = new_px; py = new_py; pz = new_pz;
IkReal x54=((1.0)*px);
IkReal x55=((1.0)*pz);
IkReal x56=((1.0)*py);
pp=((px*px)+(py*py)+(pz*pz));
npx=(((px*r00))+((py*r10))+((pz*r20)));
npy=(((px*r01))+((py*r11))+((pz*r21)));
npz=(((px*r02))+((py*r12))+((pz*r22)));
rxp0_0=((((-1.0)*r20*x56))+((pz*r10)));
rxp0_1=(((px*r20))+(((-1.0)*r00*x55)));
rxp0_2=((((-1.0)*r10*x54))+((py*r00)));
rxp1_0=((((-1.0)*r21*x56))+((pz*r11)));
rxp1_1=(((px*r21))+(((-1.0)*r01*x55)));
rxp1_2=((((-1.0)*r11*x54))+((py*r01)));
rxp2_0=(((pz*r12))+(((-1.0)*r22*x56)));
rxp2_1=(((px*r22))+(((-1.0)*r02*x55)));
rxp2_2=((((-1.0)*r12*x54))+((py*r02)));
{
IkReal j2array[2], cj2array[2], sj2array[2];
bool j2valid[2]={false};
_nj2 = 2;
if( (((-1.0)+(((4.8828124999668)*pp)))) < -1-IKFAST_SINCOS_THRESH || (((-1.0)+(((4.8828124999668)*pp)))) > 1+IKFAST_SINCOS_THRESH )
    continue;
IkReal x57=IKasin(((-1.0)+(((4.8828124999668)*pp))));
j2array[0]=((-1.57079091013634)+(((1.0)*x57)));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
j2array[1]=((1.57080174345345)+(((-1.0)*x57)));
sj2array[1]=IKsin(j2array[1]);
cj2array[1]=IKcos(j2array[1]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
if( j2array[1] > IKPI )
{
    j2array[1]-=IK2PI;
}
else if( j2array[1] < -IKPI )
{    j2array[1]+=IK2PI;
}
j2valid[1] = true;
for(int ij2 = 0; ij2 < 2; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 2; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];

{
IkReal j0eval[1];
j0eval[0]=((IKabs(px))+(IKabs(py)));
if( IKabs(j0eval[0]) < 0.0000010000000000  )
{
{
IkReal j1eval[1];
j1eval[0]=((92307.8305106862)+sj2+(((92307.830509431)*(cj2*cj2)))+(((92307.830509431)*(sj2*sj2)))+(((184615.661017409)*cj2)));
if( IKabs(j1eval[0]) < 0.0000010000000000  )
{
continue; // no branches [j0, j1]

} else
{
{
IkReal j1array[2], cj1array[2], sj1array[2];
bool j1valid[2]={false};
_nj1 = 2;
IkReal x58=((-0.32)+(((-2.91333073816678e-6)*sj2))+(((-0.319999999986738)*cj2)));
IkReal x59=((1.18e-6)+(((2.91333073816678e-6)*cj2))+(((-0.319999999986738)*sj2)));
CheckValue<IkReal> x62 = IKatan2WithCheck(IkReal(x58),IkReal(x59),IKFAST_ATAN2_MAGTHRESH);
if(!x62.valid){
continue;
}
IkReal x60=((1.0)*(x62.value));
if((((x58*x58)+(x59*x59))) < -0.00001)
continue;
CheckValue<IkReal> x63=IKPowWithIntegerCheck(IKabs(IKsqrt(((x58*x58)+(x59*x59)))),-1);
if(!x63.valid){
continue;
}
if( ((pz*(x63.value))) < -1-IKFAST_SINCOS_THRESH || ((pz*(x63.value))) > 1+IKFAST_SINCOS_THRESH )
    continue;
IkReal x61=IKasin((pz*(x63.value)));
j1array[0]=((((-1.0)*x60))+(((-1.0)*x61)));
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
j1array[1]=((3.14159265358979)+x61+(((-1.0)*x60)));
sj1array[1]=IKsin(j1array[1]);
cj1array[1]=IKcos(j1array[1]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
if( j1array[1] > IKPI )
{
    j1array[1]-=IK2PI;
}
else if( j1array[1] < -IKPI )
{    j1array[1]+=IK2PI;
}
j1valid[1] = true;
for(int ij1 = 0; ij1 < 2; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 2; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];

{
IkReal j0eval[1];
j0eval[0]=((IKabs(py))+(((0.5)*(IKabs(px)))));
if( IKabs(j0eval[0]) < 0.0000000100000000  )
{
{
IkReal j0eval[1];
j0eval[0]=((IKabs(((-1.0)+(((-1694915.25423729)*pz*sj1))+(((459638035047.4)*py*sj1))+(((459638035047.4)*cj1*pz))+(((-718184429761.563)*pp))+(((1694915.25423729)*cj1*py)))))+(IKabs(((((3389830.50847458)*cj1*px))+(((919276070094.8)*px*sj1))))));
if( IKabs(j0eval[0]) < 0.0000000100000000  )
{
{
IkReal j0eval[1];
j0eval[0]=((IKabs(((((-2.46892435437863)*sj1*sj2))+(((-271186.440677966)*sj1))+(((-2.46892435437863)*cj1*cj2))+(((271186.440666727)*cj1*sj2))+(((-271186.440666727)*cj2*sj1))+(((-1.0)*cj1))+(((847457.627118644)*py)))))+(((1694915.25423729)*(IKabs(px)))));
if( IKabs(j0eval[0]) < 0.0000000100000000  )
{
continue; // no branches [j0]

} else
{
IkReal op[2+1], zeror[2];
int numroots;
IkReal x64=((271186.440677966)*sj1);
IkReal x65=((1.0)*cj1);
IkReal x66=((847457.627118644)*py);
IkReal x67=((271186.440666727)*cj1*sj2);
IkReal x68=((271186.440666727)*cj2*sj1);
IkReal x69=((2.46892435437863)*sj1*sj2);
IkReal x70=((2.46892435437863)*cj1*cj2);
IkReal x71=(x70+x64+x65+x68+x69);
op[0]=((((-1.0)*x71))+x66+x67);
op[1]=((1694915.25423729)*px);
op[2]=((((-1.0)*x71))+x67+(((-1.0)*x66)));
polyroots2(op,zeror,numroots);
IkReal j0array[2], cj0array[2], sj0array[2], tempj0array[1];
int numsolutions = 0;
for(int ij0 = 0; ij0 < numroots; ++ij0)
{
IkReal htj0 = zeror[ij0];
tempj0array[0]=((2.0)*(atan(htj0)));
for(int kj0 = 0; kj0 < 1; ++kj0)
{
j0array[numsolutions] = tempj0array[kj0];
if( j0array[numsolutions] > IKPI )
{
    j0array[numsolutions]-=IK2PI;
}
else if( j0array[numsolutions] < -IKPI )
{
    j0array[numsolutions]+=IK2PI;
}
sj0array[numsolutions] = IKsin(j0array[numsolutions]);
cj0array[numsolutions] = IKcos(j0array[numsolutions]);
numsolutions++;
}
}
bool j0valid[2]={true,true};
_nj0 = 2;
for(int ij0 = 0; ij0 < numsolutions; ++ij0)
    {
if( !j0valid[ij0] )
{
    continue;
}
    j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
htj0 = IKtan(j0/2);

_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < numsolutions; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
rotationfunction0(solutions);
    }

}

}

} else
{
IkReal op[2+1], zeror[2];
int numroots;
IkReal x92=((718184429761.563)*pp);
IkReal x93=((459638035047.4)*cj1*pz);
IkReal x94=((1694915.25423729)*pz*sj1);
IkReal x95=((459638035047.4)*py*sj1);
IkReal x96=((1694915.25423729)*cj1*py);
IkReal x97=((-1.0)+x93);
IkReal x98=(x92+x94);
IkReal x99=(x95+x96);
op[0]=(x99+x97+(((-1.0)*x98)));
op[1]=((((3389830.50847458)*cj1*px))+(((919276070094.8)*px*sj1)));
op[2]=(x97+(((-1.0)*x98))+(((-1.0)*x99)));
polyroots2(op,zeror,numroots);
IkReal j0array[2], cj0array[2], sj0array[2], tempj0array[1];
int numsolutions = 0;
for(int ij0 = 0; ij0 < numroots; ++ij0)
{
IkReal htj0 = zeror[ij0];
tempj0array[0]=((2.0)*(atan(htj0)));
for(int kj0 = 0; kj0 < 1; ++kj0)
{
j0array[numsolutions] = tempj0array[kj0];
if( j0array[numsolutions] > IKPI )
{
    j0array[numsolutions]-=IK2PI;
}
else if( j0array[numsolutions] < -IKPI )
{
    j0array[numsolutions]+=IK2PI;
}
sj0array[numsolutions] = IKsin(j0array[numsolutions]);
cj0array[numsolutions] = IKcos(j0array[numsolutions]);
numsolutions++;
}
}
bool j0valid[2]={true,true};
_nj0 = 2;
for(int ij0 = 0; ij0 < numsolutions; ++ij0)
    {
if( !j0valid[ij0] )
{
    continue;
}
    j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
htj0 = IKtan(j0/2);

_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < numsolutions; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
rotationfunction0(solutions);
    }

}

}

} else
{
IkReal op[2+1], zeror[2];
int numroots;
op[0]=((-1.0)*px);
op[1]=((2.0)*py);
op[2]=px;
polyroots2(op,zeror,numroots);
IkReal j0array[2], cj0array[2], sj0array[2], tempj0array[1];
int numsolutions = 0;
for(int ij0 = 0; ij0 < numroots; ++ij0)
{
IkReal htj0 = zeror[ij0];
tempj0array[0]=((2.0)*(atan(htj0)));
for(int kj0 = 0; kj0 < 1; ++kj0)
{
j0array[numsolutions] = tempj0array[kj0];
if( j0array[numsolutions] > IKPI )
{
    j0array[numsolutions]-=IK2PI;
}
else if( j0array[numsolutions] < -IKPI )
{
    j0array[numsolutions]+=IK2PI;
}
sj0array[numsolutions] = IKsin(j0array[numsolutions]);
cj0array[numsolutions] = IKcos(j0array[numsolutions]);
numsolutions++;
}
}
bool j0valid[2]={true,true};
_nj0 = 2;
for(int ij0 = 0; ij0 < numsolutions; ++ij0)
    {
if( !j0valid[ij0] )
{
    continue;
}
    j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
htj0 = IKtan(j0/2);

_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < numsolutions; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
rotationfunction0(solutions);
    }

}

}
}
}

}

}

} else
{
{
IkReal j0array[2], cj0array[2], sj0array[2];
bool j0valid[2]={false};
_nj0 = 2;
CheckValue<IkReal> x101 = IKatan2WithCheck(IkReal(px),IkReal(py),IKFAST_ATAN2_MAGTHRESH);
if(!x101.valid){
continue;
}
IkReal x100=x101.value;
j0array[0]=((-1.0)*x100);
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
j0array[1]=((3.14159265358979)+(((-1.0)*x100)));
sj0array[1]=IKsin(j0array[1]);
cj0array[1]=IKcos(j0array[1]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
if( j0array[1] > IKPI )
{
    j0array[1]-=IK2PI;
}
else if( j0array[1] < -IKPI )
{    j0array[1]+=IK2PI;
}
j0valid[1] = true;
for(int ij0 = 0; ij0 < 2; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 2; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];

{
IkReal j1eval[2];
j1eval[0]=((184615.661020117)+sj2+(((184615.661017409)*cj2)));
j1eval[1]=IKsign(((0.204800000001392)+(((1.10933167245804e-6)*sj2))+(((0.204799999998388)*cj2))));
if( IKabs(j1eval[0]) < 0.0000010000000000  || IKabs(j1eval[1]) < 0.0000010000000000  )
{
{
IkReal j1eval[2];
IkReal x102=(cj2*pz);
IkReal x103=(cj0*py);
IkReal x104=(px*sj0);
IkReal x105=((0.32)*sj2);
IkReal x106=((184615.661018862)*sj2);
j1eval[0]=((((184615.661018862)*x102))+x104+(((-1.0)*x103*x106))+((x104*x106))+(((-1.0)*x103))+(((184615.661017409)*pz)));
j1eval[1]=IKsign(((((0.319999999997481)*pz))+(((-1.73333073821568e-6)*x103))+(((1.73333073821568e-6)*x104))+(((-1.0)*x103*x105))+((x104*x105))+(((0.32)*x102))));
if( IKabs(j1eval[0]) < 0.0000010000000000  || IKabs(j1eval[1]) < 0.0000010000000000  )
{
{
IkReal j1eval[2];
IkReal x107=(px*sj0);
IkReal x108=((0.32)*cj2);
IkReal x109=((184615.661018862)*cj2);
IkReal x110=(cj0*py);
IkReal x111=(pz*sj2);
j1eval[0]=((((-184615.661017409)*x107))+(((-1.0)*x107*x109))+(((184615.661018862)*x111))+((x109*x110))+pz+(((184615.661017409)*x110)));
j1eval[1]=IKsign(((((0.32)*x111))+(((-0.319999999997481)*x107))+(((-1.0)*x107*x108))+((x108*x110))+(((0.319999999997481)*x110))+(((1.73333073821568e-6)*pz))));
if( IKabs(j1eval[0]) < 0.0000010000000000  || IKabs(j1eval[1]) < 0.0000010000000000  )
{
continue; // no branches [j1]

} else
{
{
IkReal j1array[1], cj1array[1], sj1array[1];
bool j1valid[1]={false};
_nj1 = 1;
IkReal x112=pz*pz;
IkReal x113=cj2*cj2;
IkReal x114=(px*sj0);
IkReal x115=((0.999999999958557)*pz);
IkReal x116=(cj0*py);
IkReal x117=((9.10415855677118e-6)*pz);
IkReal x118=((0.32)*cj2);
IkReal x119=(cj2*sj2);
CheckValue<IkReal> x120=IKPowWithIntegerCheck(IKsign(((((-0.319999999997481)*x114))+(((0.32)*pz*sj2))+(((-1.0)*x114*x118))+(((0.319999999997481)*x116))+(((1.73333073821568e-6)*pz))+((x116*x118)))),-1);
if(!x120.valid){
continue;
}
CheckValue<IkReal> x121 = IKatan2WithCheck(IkReal(((-0.102399999999194)+(((-0.20479999999495)*cj2))+((x114*x117))+(((-1.0)*x116*x117))+(((0.999999999958557)*x112))+(((-9.32265836213369e-7)*x119))+(((-0.102399999995756)*x113))+(((-9.32265836206031e-7)*sj2)))),IkReal(((-3.77599999997028e-7)+(((0.10239999999495)*sj2))+(((-9.32265836213369e-7)*x113))+(((-1.0)*x114*x115))+(((0.102399999995756)*x119))+((x115*x116))+(((9.10415855677118e-6)*x112))+(((-1.30986583620603e-6)*cj2)))),IKFAST_ATAN2_MAGTHRESH);
if(!x121.valid){
continue;
}
j1array[0]=((-1.5707963267949)+(((1.5707963267949)*(x120.value)))+(x121.value));
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
for(int ij1 = 0; ij1 < 1; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 1; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[5];
IkReal x122=IKsin(j1);
IkReal x123=IKcos(j1);
IkReal x124=(px*sj0);
IkReal x125=((2.91333073816678e-6)*sj2);
IkReal x126=(cj0*py);
IkReal x127=((0.64)*x122);
IkReal x128=((0.319999999986738)*x123);
IkReal x129=((0.999999999958557)*x122);
IkReal x130=((2.36e-6)*x123);
IkReal x131=(pz*x123);
IkReal x132=((0.999999999958557)*x123);
IkReal x133=((9.10415855677118e-6)*x123);
IkReal x134=((9.10415855677118e-6)*x122);
IkReal x135=(cj2*x122);
evalcond[0]=((((-0.319999999986738)*sj2*x122))+(((-1.0)*x123*x125))+(((2.91333073816678e-6)*x135))+(((1.18e-6)*x122))+(((-1.0)*cj2*x128))+pz+(((-0.32)*x123)));
evalcond[1]=(((sj2*x128))+x124+(((-0.319999999986738)*x135))+(((-1.0)*x126))+(((-1.18e-6)*x123))+(((-2.91333073816678e-6)*cj2*x123))+(((-0.32)*x122))+(((-1.0)*x122*x125)));
evalcond[2]=((-1.3924e-12)+(((-2.36e-6)*pz*x122))+(((-1.0)*x126*x127))+(((-1.0)*x126*x130))+(((-1.0)*pp))+((x124*x130))+((x124*x127))+(((0.64)*x131)));
evalcond[3]=((1.73333073821568e-6)+(((-9.10415855677118e-6)*x131))+(((-1.0)*pz*x129))+(((-1.0)*x126*x132))+(((-1.0)*x124*x134))+((x124*x132))+((x126*x134))+(((0.32)*sj2)));
evalcond[4]=((-0.319999999997481)+(((-1.0)*pz*x134))+(((-1.0)*x126*x129))+(((-1.0)*x126*x133))+(((0.999999999958557)*x131))+((x124*x133))+((x124*x129))+(((-0.32)*cj2)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
{
IkReal j1array[1], cj1array[1], sj1array[1];
bool j1valid[1]={false};
_nj1 = 1;
IkReal x136=cj2*cj2;
IkReal x137=pz*pz;
IkReal x138=((0.32)*sj2);
IkReal x139=(cj0*py);
IkReal x140=(px*sj0);
IkReal x141=((0.999999999958557)*pz);
IkReal x142=((9.10415855677118e-6)*pz);
IkReal x143=(cj2*sj2);
CheckValue<IkReal> x144=IKPowWithIntegerCheck(IKsign(((((-1.73333073821568e-6)*x139))+(((1.73333073821568e-6)*x140))+(((0.319999999997481)*pz))+(((-1.0)*x138*x139))+((x138*x140))+(((0.32)*cj2*pz)))),-1);
if(!x144.valid){
continue;
}
CheckValue<IkReal> x145 = IKatan2WithCheck(IkReal(((1.48693167244239e-6)+((x140*x141))+(((-9.10415855677118e-6)*x137))+(((-1.0)*x139*x141))+(((0.10240000000505)*sj2))+(((5.54665836206031e-7)*cj2))+(((-9.32265836213369e-7)*x136))+(((0.102399999995756)*x143)))),IkReal(((-0.102399999993711)+((x140*x142))+(((5.04976571905306e-12)*cj2))+(((-1.0)*x139*x142))+(((0.999999999958557)*x137))+(((0.102399999995756)*x136))+(((-1.77065836206031e-7)*sj2))+(((9.32265836213369e-7)*x143)))),IKFAST_ATAN2_MAGTHRESH);
if(!x145.valid){
continue;
}
j1array[0]=((-1.5707963267949)+(((1.5707963267949)*(x144.value)))+(x145.value));
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
for(int ij1 = 0; ij1 < 1; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 1; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[5];
IkReal x146=IKsin(j1);
IkReal x147=IKcos(j1);
IkReal x148=(px*sj0);
IkReal x149=((2.91333073816678e-6)*sj2);
IkReal x150=(cj0*py);
IkReal x151=((0.64)*x146);
IkReal x152=((0.319999999986738)*x147);
IkReal x153=((0.999999999958557)*x146);
IkReal x154=((2.36e-6)*x147);
IkReal x155=(pz*x147);
IkReal x156=((0.999999999958557)*x147);
IkReal x157=((9.10415855677118e-6)*x147);
IkReal x158=((9.10415855677118e-6)*x146);
IkReal x159=(cj2*x146);
evalcond[0]=((((2.91333073816678e-6)*x159))+(((-0.32)*x147))+(((1.18e-6)*x146))+(((-1.0)*x147*x149))+(((-1.0)*cj2*x152))+pz+(((-0.319999999986738)*sj2*x146)));
evalcond[1]=((((-0.32)*x146))+(((-2.91333073816678e-6)*cj2*x147))+x148+(((-1.0)*x150))+(((-1.0)*x146*x149))+(((-0.319999999986738)*x159))+((sj2*x152))+(((-1.18e-6)*x147)));
evalcond[2]=((-1.3924e-12)+(((0.64)*x155))+(((-1.0)*x150*x154))+(((-1.0)*x150*x151))+(((-1.0)*pp))+((x148*x151))+((x148*x154))+(((-2.36e-6)*pz*x146)));
evalcond[3]=((1.73333073821568e-6)+(((-1.0)*pz*x153))+((x150*x158))+(((-1.0)*x150*x156))+(((-1.0)*x148*x158))+((x148*x156))+(((0.32)*sj2))+(((-9.10415855677118e-6)*x155)));
evalcond[4]=((-0.319999999997481)+(((0.999999999958557)*x155))+(((-1.0)*pz*x158))+(((-1.0)*x150*x153))+(((-1.0)*x150*x157))+((x148*x153))+((x148*x157))+(((-0.32)*cj2)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
{
IkReal j1array[1], cj1array[1], sj1array[1];
bool j1valid[1]={false};
_nj1 = 1;
IkReal x160=(px*sj0);
IkReal x161=((2.91333073816678e-6)*cj2);
IkReal x162=((0.319999999986738)*sj2);
IkReal x163=(cj0*py);
IkReal x164=((2.91333073816678e-6)*sj2);
IkReal x165=((0.319999999986738)*cj2);
IkReal x166=((0.319999999986738)*x163);
CheckValue<IkReal> x167=IKPowWithIntegerCheck(IKsign(((0.204800000001392)+(((1.10933167245804e-6)*sj2))+(((0.204799999998388)*cj2)))),-1);
if(!x167.valid){
continue;
}
CheckValue<IkReal> x168 = IKatan2WithCheck(IkReal(((((0.32)*x160))+(((-0.32)*x163))+((pz*x162))+(((-1.0)*x163*x165))+(((-1.0)*x163*x164))+(((-1.18e-6)*pz))+(((-1.0)*pz*x161))+((x160*x165))+((x160*x164)))),IkReal(((((-1.18e-6)*x163))+((pz*x165))+((pz*x164))+(((-1.0)*x160*x162))+((x162*x163))+(((-1.0)*x161*x163))+(((1.18e-6)*x160))+((x160*x161))+(((0.32)*pz)))),IKFAST_ATAN2_MAGTHRESH);
if(!x168.valid){
continue;
}
j1array[0]=((-1.5707963267949)+(((1.5707963267949)*(x167.value)))+(x168.value));
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
for(int ij1 = 0; ij1 < 1; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 1; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[5];
IkReal x169=IKsin(j1);
IkReal x170=IKcos(j1);
IkReal x171=(px*sj0);
IkReal x172=((2.91333073816678e-6)*sj2);
IkReal x173=(cj0*py);
IkReal x174=((0.64)*x169);
IkReal x175=((0.319999999986738)*x170);
IkReal x176=((0.999999999958557)*x169);
IkReal x177=((2.36e-6)*x170);
IkReal x178=(pz*x170);
IkReal x179=((0.999999999958557)*x170);
IkReal x180=((9.10415855677118e-6)*x170);
IkReal x181=((9.10415855677118e-6)*x169);
IkReal x182=(cj2*x169);
evalcond[0]=((((-0.32)*x170))+(((2.91333073816678e-6)*x182))+(((1.18e-6)*x169))+(((-1.0)*x170*x172))+pz+(((-1.0)*cj2*x175))+(((-0.319999999986738)*sj2*x169)));
evalcond[1]=(((sj2*x175))+(((-0.32)*x169))+(((-1.0)*x173))+x171+(((-2.91333073816678e-6)*cj2*x170))+(((-1.0)*x169*x172))+(((-0.319999999986738)*x182))+(((-1.18e-6)*x170)));
evalcond[2]=((-1.3924e-12)+(((0.64)*x178))+(((-1.0)*pp))+((x171*x174))+((x171*x177))+(((-1.0)*x173*x177))+(((-1.0)*x173*x174))+(((-2.36e-6)*pz*x169)));
evalcond[3]=((1.73333073821568e-6)+((x173*x181))+(((-1.0)*pz*x176))+(((-1.0)*x171*x181))+((x171*x179))+(((-9.10415855677118e-6)*x178))+(((0.32)*sj2))+(((-1.0)*x173*x179)));
evalcond[4]=((-0.319999999997481)+(((0.999999999958557)*x178))+(((-1.0)*pz*x181))+((x171*x180))+((x171*x176))+(((-1.0)*x173*x180))+(((-1.0)*x173*x176))+(((-0.32)*cj2)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}
}
}

}

}
}
}
}
return solutions.GetNumSolutions()>0;
}
inline void rotationfunction0(IkSolutionListBase<IkReal>& solutions) {
for(int rotationiter = 0; rotationiter < 1; ++rotationiter) {
IkReal x72=((9.10415855677118e-6)*cj2);
IkReal x73=((0.999999999958557)*sj2);
IkReal x74=(cj0*r12);
IkReal x75=(cj0*r10);
IkReal x76=((1.0)*cj0);
IkReal x77=((1.0)*cj1);
IkReal x78=(cj0*r11);
IkReal x79=((1.0)*sj0);
IkReal x80=((((-1.0)*x72))+x73);
IkReal x81=((((-1.0)*x73))+x72);
IkReal x82=((-1.0)*cj1);
IkReal x83=(r02*x79);
IkReal x84=((((0.999999999958557)*cj2))+(((9.10415855677118e-6)*sj2)));
IkReal x85=(sj1*x81);
IkReal x86=(sj1*x84);
IkReal x87=(((sj1*x80))+((cj1*x84)));
IkReal x88=(x86+((cj1*x81)));
IkReal x89=(x86+((x80*x82)));
IkReal x90=(((x82*x84))+x85);
IkReal x91=(cj0*x88);
new_r00=((((-1.0)*r00*x79*x87))+((r20*x89))+((x75*x87)));
new_r01=(((r21*x89))+((x78*x87))+(((-1.0)*r01*x79*x87)));
new_r02=((((-1.0)*x83*x87))+((r22*(((((-1.0)*x77*x80))+x86))))+((x74*x87)));
new_r10=((((-1.0)*r00*x79*x88))+((r20*(((((-1.0)*x77*x84))+x85))))+((x75*x88)));
new_r11=(((r21*x90))+((x78*x88))+(((-1.0)*r01*x79*x88)));
new_r12=((((-1.0)*x83*x88))+((x74*x88))+((r22*x90)));
new_r20=((((-1.0)*r00*x76))+(((-1.0)*r10*x79)));
new_r21=((((-1.0)*r01*x76))+(((-1.0)*r11*x79)));
new_r22=((((-1.0)*r02*x76))+(((-1.0)*r12*x79)));
{
IkReal j3array[1], cj3array[1], sj3array[1];
bool j3valid[1]={false};
_nj3 = 1;
if( IKabs(((-1.0)*new_r02)) < IKFAST_ATAN2_MAGTHRESH && IKabs(new_r12) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((-1.0)*new_r02))+IKsqr(new_r12)-1) <= IKFAST_SINCOS_THRESH )
    continue;
j3array[0]=IKatan2(((-1.0)*new_r02), new_r12);
sj3array[0]=IKsin(j3array[0]);
cj3array[0]=IKcos(j3array[0]);
if( j3array[0] > IKPI )
{
    j3array[0]-=IK2PI;
}
else if( j3array[0] < -IKPI )
{    j3array[0]+=IK2PI;
}
j3valid[0] = true;
for(int ij3 = 0; ij3 < 1; ++ij3)
{
if( !j3valid[ij3] )
{
    continue;
}
_ij3[0] = ij3; _ij3[1] = -1;
for(int iij3 = ij3+1; iij3 < 1; ++iij3)
{
if( j3valid[iij3] && IKabs(cj3array[ij3]-cj3array[iij3]) < IKFAST_SOLUTION_THRESH && IKabs(sj3array[ij3]-sj3array[iij3]) < IKFAST_SOLUTION_THRESH )
{
    j3valid[iij3]=false; _ij3[1] = iij3; break; 
}
}
j3 = j3array[ij3]; cj3 = cj3array[ij3]; sj3 = sj3array[ij3];

{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
if( IKabs(((-1.0)*new_r20)) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-1.0)*new_r21)) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((-1.0)*new_r20))+IKsqr(((-1.0)*new_r21))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((-1.0)*new_r20), ((-1.0)*new_r21));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(5);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}
}
}
}
}static inline void polyroots2(IkReal rawcoeffs[2+1], IkReal rawroots[2], int& numroots) {
    IkReal det = rawcoeffs[1]*rawcoeffs[1]-4*rawcoeffs[0]*rawcoeffs[2];
    if( det < 0 ) {
        numroots=0;
    }
    else if( det == 0 ) {
        rawroots[0] = -0.5*rawcoeffs[1]/rawcoeffs[0];
        numroots = 1;
    }
    else {
        det = IKsqrt(det);
        rawroots[0] = (-rawcoeffs[1]+det)/(2*rawcoeffs[0]);
        rawroots[1] = (-rawcoeffs[1]-det)/(2*rawcoeffs[0]);//rawcoeffs[2]/(rawcoeffs[0]*rawroots[0]);
        numroots = 2;
    }
}
};


/// solves the inverse kinematics equations.
/// \param pfree is an array specifying the free joints of the chain.
IKFAST_API bool ComputeIk(const IkReal* eetrans, const IkReal* eerot, const IkReal* pfree, IkSolutionListBase<IkReal>& solutions) {
IKSolver solver;
return solver.ComputeIk(eetrans,eerot,pfree,solutions);
}

IKFAST_API bool ComputeIk2(const IkReal* eetrans, const IkReal* eerot, const IkReal* pfree, IkSolutionListBase<IkReal>& solutions, void* pOpenRAVEManip) {
IKSolver solver;
return solver.ComputeIk(eetrans,eerot,pfree,solutions);
}

IKFAST_API const char* GetKinematicsHash() { return "<robot:GenericRobot - biped_wj1109 (6b61234c949eba4d913fee6767726119)>"; }

IKFAST_API const char* GetIkFastVersion() { return "0x1000004b"; }

#ifdef IKFAST_NAMESPACE
} // end namespace
#endif

#ifndef IKFAST_NO_MAIN
#include <stdio.h>
#include <stdlib.h>
#ifdef IKFAST_NAMESPACE
using namespace IKFAST_NAMESPACE;
#endif
int main(int argc, char** argv)
{
    if( argc != 12+GetNumFreeParameters()+1 ) {
        printf("\nUsage: ./ik r00 r01 r02 t0 r10 r11 r12 t1 r20 r21 r22 t2 free0 ...\n\n"
               "Returns the ik solutions given the transformation of the end effector specified by\n"
               "a 3x3 rotation R (rXX), and a 3x1 translation (tX).\n"
               "There are %d free parameters that have to be specified.\n\n",GetNumFreeParameters());
        return 1;
    }

    IkSolutionList<IkReal> solutions;
    std::vector<IkReal> vfree(GetNumFreeParameters());
    IkReal eerot[9],eetrans[3];
    eerot[0] = atof(argv[1]); eerot[1] = atof(argv[2]); eerot[2] = atof(argv[3]); eetrans[0] = atof(argv[4]);
    eerot[3] = atof(argv[5]); eerot[4] = atof(argv[6]); eerot[5] = atof(argv[7]); eetrans[1] = atof(argv[8]);
    eerot[6] = atof(argv[9]); eerot[7] = atof(argv[10]); eerot[8] = atof(argv[11]); eetrans[2] = atof(argv[12]);
    for(std::size_t i = 0; i < vfree.size(); ++i)
        vfree[i] = atof(argv[13+i]);
    bool bSuccess = ComputeIk(eetrans, eerot, vfree.size() > 0 ? &vfree[0] : NULL, solutions);

    if( !bSuccess ) {
        fprintf(stderr,"Failed to get ik solution\n");
        return -1;
    }

    printf("Found %d ik solutions:\n", (int)solutions.GetNumSolutions());
    std::vector<IkReal> solvalues(GetNumJoints());
    for(std::size_t i = 0; i < solutions.GetNumSolutions(); ++i) {
        const IkSolutionBase<IkReal>& sol = solutions.GetSolution(i);
        printf("sol%d (free=%d): ", (int)i, (int)sol.GetFree().size());
        std::vector<IkReal> vsolfree(sol.GetFree().size());
        sol.GetSolution(&solvalues[0],vsolfree.size()>0?&vsolfree[0]:NULL);
        for( std::size_t j = 0; j < solvalues.size(); ++j)
            printf("%.15f, ", solvalues[j]);
        printf("\n");
    }
    return 0;
}

#endif
